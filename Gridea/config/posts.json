{
  "posts": [
    {
      "content": "# 常量变量 & 类型系统\n## 常量变量\n常量：一旦赋值，就不能改变它的值。也就是说不能对它进行重新赋值。\n变量：是一个名字，在赋值符号的左边，这个名字可以指代赋值符号右边的内容。\n注意：Python不存在常量。因为Python一切皆对象，Python赋值即定义。\n## 类型系统\npython是门强类型的动态语言，但它同时又是一门解释性语言。\n那么作为强类型语言，python就有自己的类型系统，python的类型系统分为基本类型和内置数据结构。\n基本类型分为：\n* int\n* float\n* bool\n* None\n\nstr、list、dict等在官方文档中查到，隶属于：built-in structure。\n内置数据结构分为：\n* str\n* list\n* tuple\n* set\n* dict\n* bytes\n* bytearray\n\n动态语言指一个变量的类型可以被多次修改、赋值。\n而在java、c#这种静态语言中，一旦定义了一个变量\n```\nstring strA = 'a'\n```\n就无法改变它的类型了，只能改变值。\n# 基本数据类型\n## 整型和浮点型\n在python2里区分整型和长整型，python3里不区分，只有整型。\n对于int来说，不存在溢出。\n但float会溢出，会损失精度，这也就是我们常说的精度失效。\n举个简单的栗子：\n```\nIn[1]：3.3 * 6\nOut[1]：19.799999999999997\n```\n### 为什么会有精度失效\n因为计算机都是用二进制表示的，那么势必会存在0和1之间的数字没法表示。\n### 二进制小数转十进制小数\n采用方法：按权展开求和法\n举个栗子：将101.111(2)这个二进制小数转换成十进制数。\n计算：1*(2^2)+0*(2^1)+1*(2^0)+1*(2^(-1))+1*(2^(-2))+1*(2^(-3))=5.875\n### 十进制小数转二进制小数\n十进制数的整数位是二进制数的整数位，十进制数的小数位是二进制数的小数位\n假如有小数111.4(10)，进行计算\n小数位采用“乘二取整法”（顺序排列），取整就是取整数位上的数字\n| 乘二 |  取整 |\n| - | - |\n| 0.4\\*2=0.8 | 0 |\n| 0.8\\*2=1.6 | 1 |\n| 0.6\\*2=1.2 | 1 |\n| 0.2\\*2=0.4 | 0 |\n| 0.4\\*2=0.8 | 0 |\n| 0.8\\*2=1.6 | 1 |\n| 0.6\\*2=1.2 | 1 |\n| 0.2\\*2=0.4 | 0 |\n经过计算发现出现了循环，0.01100110...(循环0110)\n整数位采用“除二取余法”（逆序排列）\n| 除二 | 商 | 余数 |\n| - | - | - |\n| 111/2 | 55 | 1 |\n| 55/2 | 27 | 1 |\n| 27/2 | 13 | 1 |\n| 13/2 | 6 | 1 |\n| 6/2 | 3 | 0 |\n| 3/2 | 1 | 1 |\n| 1/2 | 0 | 1 |\n所以整数位是1101111\n最终结果是整数位和小数位合并1101111.01100110......\n### 代码\n从代码角度出发，如何规避这类情况？那就要用到经常提到的一个概念：“精确到小数点后面多少位”\n```\nfrom decimal import Decimal\nfrom decimal import getcontext\ngetcontext().prec = 8\nIn[]：Decimal(3.3) * Decimal(6)\nOut[]：Decimal('19.800000')\n```\n## None\nNone就是一个类型，在js里面有undefined和null，但是python只有一个None。\nNone既不是空字符串，也不是未定义\nNone在判断语句中位False，但None不等于False\n```\nIn[]：None == False\nOut[]：False\n```\n## Bool\nBool就是True or False。\n## 总结\n基本数据类型一共有4种，int、float、bool、None\n# 运算符\n## 算数运算符\n* \\+\n* \\-\n* \\*\n* \\/\n* \\//\n* \\**\n* \\%\n\n以上就是python运算符，但是要注意：只能对int和float做运算。\n特别说明：\n/运算符在python3是自然除，python2是整除\n## 比较运算符\n* \\>\n* \\<\n* \\=\n* \\!=\n* \\>=\n* \\<=\n\n所有比较运算符的返回值都是bool类型\n## 逻辑运算符\n* and\n* or\n* not\n\n逻辑运算符的两边必须是True或False\n注意：逻辑运算符的短路\nor运算，只要执行到第一个位true的时候之后就不执行了。\n## 成员运算符\n* in\n* not in\n\n## 身份运算符\n* is\n* is not\n\n## 位运算符\n* \\<<\n* \\>>\n* &\n* |\n* ^ 异或\n\n位运算符用在哪里呢？\n### 判断奇偶数\n我们可以利用&运算符的特性来判断二进制数最后一位是0还是1。\n用if((a&1) == 0)代替if(a%2 == 0)来判断a是不是偶数。\n### 交换两个数\n先了解一下^的几个特性\n* a^a = 0\n* a^0 = a\n* (a^b)^c = a^(b^c)\n\n交换两个数的方法为：\n```\na ^= b\nb ^= a\na ^= b\n```\n从数学角度分析一下：\na = a ^ b\nb = a ^ b = (a ^ b) ^ b = a ^ (b ^ b) = a ^ 0 = a\na = a ^ b = (a ^ b) ^ b = (a ^ a) ^ b = b ^ 0 = b\n## 赋值运算符\n* i += 3\n* i \\*= 3\n\n所有的算术运算符都可以和赋值运算符一起使用。\n# 表达式 & 程序结构\n## 表达式 & 语句\n表达式：常量/变量和运算符一起构成，表达式有返回值\n语句：关键字和表达式一起构成，语句没有返回值\n## 顺序结构\n就是代码从上到下，一行一行执行\n## 分支结构\n### 单分支\n单分支只有一个操作，条件成立去做操作，然后结束，否则直接结束。\n```\na = 5\nif a < 10:\n    print('a less than 10')\nprint(a)\n```\n### 双分支\n双分支就是当条件不成立的时候还多了一个操作，方便做逻辑处理。\n```\na = 5\nif a < 10:\n    print('a less than 10')\nelse:\n    print('a is not less than 10')\nprint(a)\n```\n双分支结构永远只有一个条件会被执行\n### 嵌套\n嵌套的意思就是，在if里面还可以有if\n通过结构嵌套实现多分支\n```\na = 5\nif a < 10:\n    print('a less than 10')\nelse:\n    if a < 20:\n        print('10 <= a < 20')\n    else:\n        print('a is not less than 10')\nprint(a)\n```\n### 关键字elif\n```\na = 5\nif a < 10:\n    print('a less than 10')\nelif a < 20:\n    print('10 <= a < 20')\nelse:\n    print('a is not less than 10')\nprint(a)\n```\n对于分支结构来说，总结一下就是：\n1. 分支结构永远只有1个或者0个分支会被执行\n2. 分支结构中所有条件是互斥的\n3. 条件只能是bool类型或者可以隐式转换为bool类型\n## 循环结构\n### while\nwhile循环需要一个条件支撑，如果条件为True，循环将继续。\n### for in\npython的for循环和其他语言不一样，在for关键字里实现了一个迭代协议，通过迭代协议完成了对可迭代对象的循环。\n#### 提前终止\n\n#### 跳过\n### else子句\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "data": {
        "title": "Python基本语法",
        "date": "2019-08-27 13:51:40",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "python-ji-ben-yu-fa"
    },
    {
      "content": "**Git配置**\nGit安装完成后需要配置个人的用户名称和邮件地址\n```\ngit config --global user.name \"yanghang\"\ngit config --global user.email yanghang0214@qq.com\n```\n查看配置信息\n```\ngit config --list\n```\n**Git工作区、暂存区和版本库**\n* 工作区：就是你在电脑里能看到的目录。\n* 暂存区：英文叫stage, 或index。一般存放在 \".git目录下\" 下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。\n* 版本库：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。\n\n**Git创建仓库**\n初始化Git仓库\n```\ngit init\n```\n使用git clone从现有Git仓库中拷贝项目（类似svn checkout）\n克隆仓库的命名格式为：\n```\ngit clone <repo>\n```\n如果需要克隆到指定目录，可以使用：\n```\ngit clone <repo> <directory>\n```\n将文件添加到缓存，例如添加两个文件：\n```\ngit add README hello.php \n```\n新项目中添加所有文件很普遍，可以使用git add .\n查看文件是否添加成功：\n```\ngit status\ngit status -s\n```\n将缓存区内容添加到仓库中：\n```\ngit commit -m '第一次版本提交'\n```\n查看文件修改了哪些内容：\n```\ngit diff readme.txt \n```\n查看git提交修改的日志：\n```\ngit log\n```\nGit版本回退，在Git中用HEAD表示当前版本，上个版本是HEAD^,上上个版本是HEAD^^，往上100个写成HEAD~100：\n```\ngit reset --hard HEAD^\n```\n要重返未来需要用git reflog查看命令历史\nGit添加远程仓库\n第一步：创建SSH Key，使用自己的邮件地址，一路回车使用默认值。\n```\nssh-keygen -t rsa -C \"youremail@example.com\"\n```\n如果一切顺利的话，可以在**用户主目录**里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。\n第二步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容，点“Add Key”，你就应该看到已经添加的Key。\n关联远程仓库：\n```\ngit remote add origin git@github.com:yh0214/gridea.source.code.git\n```\n远程库的名字就是origin，这是Git默认的叫法，也可以改成别的\n关联后，使用命令git push -u origin master第一次推送master分支的所有内容；此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；\n从远程库克隆至本地：\n```\ngit clone git@github.com:yh0214/gridea.source.code\n```\n删除github上文件\n```\ngit rm -r --cached 文件夹名称\ngit commit -m 'delete 文件夹名称 dir'\ngit push -u origin master\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
      "data": {
        "title": "Git",
        "date": "2019-08-27 08:31:42",
        "tags": [],
        "published": true,
        "hideInList": false,
        "feature": null
      },
      "isEmpty": false,
      "excerpt": "",
      "abstract": "",
      "fileName": "git"
    }
  ],
  "tags": [
    {
      "name": "Gridea",
      "slug": "eqeFQaS7k",
      "used": false
    }
  ],
  "menus": []
}